## Task 1: CSS Processor

**CSS processors** are tools that extend CSS with additional features, making it more powerful and efficient. They allow you to write CSS in a more concise and maintainable way, often introducing features that are not yet supported by browsers natively.

**Examples of popular CSS preprocessors:**

* **Sass**
* **LESS**
* **Stylus**

**Advantages of using a CSS processor:**

* **Nesting:** CSS processors allow you to nest selectors, making your code more organized and readable.
* **Variables:** You can define variables to store values and reuse them throughout your stylesheet.
* **Mixins:** Mixins allow you to create reusable blocks of CSS code.
* **Functions:** You can define custom functions to perform calculations or manipulate values.
* **Imports:** Import external CSS files to organize your code and reuse styles.
* **Placeholders:** Placeholders provide a way to define CSS rules that are not applied directly to elements but can be extended or mixed into other styles.

**Code Example (Sass):**

```scss
$primary-color: blue;

.button {
  background-color: $primary-color;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}
```

In this example, Sass is used to define a variable `$primary-color` and use it to set the background color of the `.button` class. This makes it easy to change the primary color throughout the stylesheet.

**Conclusion:**

CSS processors can significantly improve the development workflow by providing features that make CSS more efficient and maintainable. They are especially useful for large projects and when working in teams.
