### What is Sass?

**Sass** (Syntactically Awesome Style Sheets) is a CSS preprocessor that extends the capabilities of traditional CSS by adding features such as variables, nesting, mixins, functions, and more. These enhancements make it easier to write and maintain stylesheets, allowing developers to organize their CSS in a more structured and modular way.

### Differences Between Sass and Regular CSS

1. **Variables**: Sass allows the use of variables to store values (like colors and sizes), making it easier to manage styles.
2. **Nesting**: In Sass, you can nest selectors in a way that reflects the HTML structure, improving readability.
3. **Partials and Imports**: Sass supports splitting styles into smaller files (partials) and importing them into a main stylesheet, which promotes better organization.
4. **Mixins**: Sass provides mixins that allow you to create reusable style blocks, reducing repetition.

### Example: Sass File Demonstrating Nesting, Partials, and Imports

#### File Structure
```
styles/
│
├── _variables.scss   // Partial file for variables
├── _buttons.scss     // Partial file for button styles
└── main.scss         // Main Sass file
```

#### `_variables.scss` (Partial)
```scss
// _variables.scss
$primary-color: #3498db;
$button-padding: 10px 15px;
```

#### `_buttons.scss` (Partial)
```scss
// _buttons.scss
@import 'variables';

.button {
  background-color: $primary-color;
  color: white;
  padding: $button-padding;
  border: none;
  border-radius: 5px;
  
  &:hover {
    background-color: darken($primary-color, 10%);
  }
}
```

#### `main.scss` (Main Sass File)
```scss
// main.scss
@import 'variables';
@import 'buttons';

body {
  font-family: Arial, sans-serif;
  background-color: #f8f8f8;
  color: #333;

  .header {
    background-color: $primary-color;
    padding: 20px;
    text-align: center;

    h1 {
      margin: 0;
      color: white;
    }
  }
}
```

### Compiled CSS Output

After running the Sass compiler on the `main.scss` file, the resulting CSS would look like this:

```css
/* Compiled CSS Output */
body {
  font-family: Arial, sans-serif;
  background-color: #f8f8f8;
  color: #333;
}

.header {
  background-color: #3498db;
  padding: 20px;
  text-align: center;
}

.header h1 {
  margin: 0;
  color: white;
}

.button {
  background-color: #3498db;
  color: white;
  padding: 10px 15px;
  border: none;
  border-radius: 5px;
}

.button:hover {
  background-color: #2980b9; /* darken(10%) of $primary-color */
}
```

### Notable Differences from Standard CSS

1. **Variables**: The use of `$primary-color` and `$button-padding` in the Sass files is replaced with their respective values in the compiled CSS.
2. **Nesting**: The `.header h1` selector in the Sass reflects the HTML structure, making it clear that the `h1` is a child of `.header`.
3. **Imports**: The `@import` statements allow for better organization of styles by splitting them into partial files, which are combined into one stylesheet during compilation.
4. **Functions**: The `darken()` function is used in the hover state for the button, showcasing how Sass can dynamically compute values.

### Conclusion

Sass enhances the capabilities of CSS by providing features like variables, nesting, and modularization through partials and imports. These features make stylesheets more maintainable and organized, allowing developers to write cleaner and more efficient code. The compiled CSS maintains the same functionality as standard CSS while benefiting from the improved structure and reusability that Sass offers.