### Alignment and Display in CSS

In CSS, alignment and display properties are crucial for controlling how elements are arranged and displayed on a web page. Understanding these properties allows developers to create organized and visually appealing layouts.

### Alignment Techniques

1. **Text Alignment**: Controls the horizontal alignment of text within an element using the `text-align` property.
   - Values: `left`, `right`, `center`, `justify`.

2. **Vertical Alignment**: Achieved through several methods, such as using `line-height`, `flexbox`, or grid layouts.

3. **Margin Auto**: Using `margin: auto;` can center block-level elements horizontally.

### Display Properties

1. **Block**: Elements that take up the full width available, starting on a new line (e.g., `<div>`, `<p>`).
2. **Inline**: Elements that do not start on a new line and only take up as much width as necessary (e.g., `<span>`, `<a>`).
3. **Inline-Block**: Similar to inline elements but respect width and height properties.
4. **Flex**: A layout model that allows for flexible and responsive designs.

### Example: Alignment and Display Demonstration

Below is an HTML document that showcases various alignment techniques and display properties.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Alignment and Display Example</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
        }

        h1 {
            text-align: center; /* Center-aligning the heading */
        }

        .text-alignment {
            text-align: center; /* Center-align text within this div */
            margin-bottom: 20px;
        }

        .block-element {
            display: block; /* Block element */
            background-color: #FFCC00;
            padding: 10px;
            margin-bottom: 20px;
        }

        .inline-element {
            display: inline; /* Inline element */
            background-color: #00CCFF;
            padding: 10px;
            margin-right: 10px;
        }

        .inline-block {
            display: inline-block; /* Inline-block element */
            background-color: #FF5733;
            padding: 10px;
            margin-right: 10px;
        }

        .flex-container {
            display: flex; /* Flexbox container */
            justify-content: space-between; /* Space between items */
            margin-bottom: 20px;
        }

        .flex-item {
            background-color: #33FF57;
            padding: 20px;
            flex: 1; /* Flex items will take equal space */
            margin-right: 10px;
        }

        .flex-item:last-child {
            margin-right: 0; /* Remove margin for the last item */
        }

        .vertical-alignment {
            display: flex; /* Flexbox for vertical alignment */
            align-items: center; /* Align items vertically center */
            height: 100px;
            background-color: #FFD700;
            margin-bottom: 20px;
        }

        .vertical-alignment div {
            margin: 0 10px;
        }
    </style>
</head>
<body>
    <h1>Alignment and Display Demonstration</h1>

    <div class="text-alignment">
        <p>This text is <strong>center-aligned</strong> using the text-align property.</p>
    </div>

    <div class="block-element">
        <p>This is a <strong>block element</strong>. It takes up the full width and starts on a new line.</p>
    </div>

    <span class="inline-element">Inline Element 1</span>
    <span class="inline-element">Inline Element 2</span>
    <div class="inline-block">Inline Block Element 1</div>
    <div class="inline-block">Inline Block Element 2</div>

    <div class="flex-container">
        <div class="flex-item">Flex Item 1</div>
        <div class="flex-item">Flex Item 2</div>
        <div class="flex-item">Flex Item 3</div>
    </div>

    <div class="vertical-alignment">
        <div>Aligned Left</div>
        <div style="flex: 1;">Centered Item</div>
        <div>Aligned Right</div>
    </div>
</body>
</html>
```

### Explanation of the Code

1. **HTML Structure**:
   - The document includes a heading and various sections demonstrating different alignment and display techniques.

2. **Text Alignment**:
   - The `text-alignment` class centers the text within the div using `text-align: center`.

3. **Block Element**:
   - The `block-element` class uses `display: block` to create a block-level element that takes the full width and starts on a new line.

4. **Inline and Inline-Block Elements**:
   - `inline-element` uses `display: inline`, allowing it to stay on the same line with other inline elements.
   - `inline-block` elements respect width and height while allowing them to sit beside one another.

5. **Flexbox Container**:
   - The `flex-container` class uses `display: flex` to create a flexible layout. The items are spaced out evenly using `justify-content: space-between`.

6. **Vertical Alignment**:
   - The `vertical-alignment` class demonstrates how to vertically align items using flexbox with `align-items: center`, ensuring that items within the container are centered.

### Conclusion

CSS offers various methods for aligning elements and controlling their display properties, allowing developers to create organized layouts that enhance user experience. This example showcases how to use text alignment, block and inline elements, flexbox, and vertical alignment techniques to achieve desired designs effectively. Understanding these concepts is vital for building responsive and visually appealing web pages.